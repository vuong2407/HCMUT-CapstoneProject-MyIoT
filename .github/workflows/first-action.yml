name: Deployment Workflow
on: workflow_dispatch
jobs:
  Deploy-on-VM:
    runs-on: self-hosted
    steps:
      - name: Print Greeting
        run: echo "Hello World"
      - name: Check version php > 8.1
        run: |
          phpVersion=$(php -v | head -n 1 | cut -d " " -f 2 | cut -d "." -f 1,2)
          if [[ "$(echo "$phpVersion >= 8.1" | bc)" -ne 1 ]]; then 
            echo "<8.1";
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y software-properties-common
            sudo add-apt-repository ppa:ondrej/php
            sudo apt update
            sudo apt install -y php8.1
            sudo apt install php8.1-common php8.1-mysql php8.1-xml php8.1-xmlrpc php8.1-curl php8.1-gd php8.1-imagick php8.1-cli php8.1-dev php8.1-imap php8.1-mbstring php8.1-opcache php8.1-soap php8.1-zip php8.1-redis php8.1-intl -y 
          else 
            echo ">8.1";
          fi
      - name: check Docker and Docker Compose is available
        run: |
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo \
            "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi
      - name: Install Nodejs for runner
        uses: actions/setup-node@v3
        with:
          node-version: "18.15.0"
      - name: Checkout code to runner
        uses: actions/checkout@v3
        with:
          ssh-key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtuffygSjTLOxIf0jjplWZlaIp34OKJkyNV010+w08OoeWgr631ArGZmBQ5ECBUFYG6TxwkW8G7hdwiYvpFPRL9F/byDgmDMzgqppEs/vowqsn53bnHU0iyUn2gvw3lxsMVe1TazZEvKAbC+Tv8TJJ7HI0lMNXo2oV67kih1nqQwnFP1ijAjD4YiaXhfuNiBqL2QD6irAmlochXNWnul39Dy/Kwg1ZHop+Uu4t9meyMr8z8yOc6kS6/UOO/slmlf1j+PnySCARgjHE4vbHtMI6V2ZdtfjOiIMXh1PEFRYjJ9iC3CKvRgAzDP6RDZMtu2H4sSgMftXkld/NfBcPa5LpgnTp2L9+FcbqQ7y085tHicXpnIjxq/ZZvfaxK1SfuehyqMwbvDkKEnWFsSAQzqxKNPF+1yMnF7mH//UxXqnRzQXtNfQgT/q5UYXhCqz1z12iP/ILcz/u9jNJTY3Miep8NV+9EwxZgNO0W9YpJ6QpsehWClg+m5AJ9zuupsrWTuM= vuongnguyen@newrepo
      - name: install JS dependencies
        run: |
          cd bktel
          npm ci
      - name: install php dependencies
        run: |
          cd bktel
          composer i --ignore-platform-reqs
      - name: Building Project
        run: |
          cd bktel
          composer require laravel/sail --dev --ignore-platform-reqs
          php artisan sail:install
          sudo docker compose down
          sudo docker compose up -d
      - name: run on production
        run: |
          cd bktel
          sudo npm run production
      - name: set permission for storage
        run: |
          cd bktel
          sudo chmod -R 775 storage
          sudo chmod -R ugo+rw storage
